// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// r_wrapper_binmf
void r_wrapper_binmf(Rcpp::NumericVector A, Rcpp::NumericVector B, size_t dimA, size_t dimB, size_t k, Rcpp::NumericVector Xr, Rcpp::IntegerVector Xind, Rcpp::IntegerVector Xindptr, size_t nnz, double reg_param, size_t niter, int projected, int nthreads);
RcppExport SEXP _binmf_r_wrapper_binmf(SEXP ASEXP, SEXP BSEXP, SEXP dimASEXP, SEXP dimBSEXP, SEXP kSEXP, SEXP XrSEXP, SEXP XindSEXP, SEXP XindptrSEXP, SEXP nnzSEXP, SEXP reg_paramSEXP, SEXP niterSEXP, SEXP projectedSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< size_t >::type dimA(dimASEXP);
    Rcpp::traits::input_parameter< size_t >::type dimB(dimBSEXP);
    Rcpp::traits::input_parameter< size_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xind(XindSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xindptr(XindptrSEXP);
    Rcpp::traits::input_parameter< size_t >::type nnz(nnzSEXP);
    Rcpp::traits::input_parameter< double >::type reg_param(reg_paramSEXP);
    Rcpp::traits::input_parameter< size_t >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type projected(projectedSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    r_wrapper_binmf(A, B, dimA, dimB, k, Xr, Xind, Xindptr, nnz, reg_param, niter, projected, nthreads);
    return R_NilValue;
END_RCPP
}
// predict_multiple
void predict_multiple(Rcpp::NumericVector A, Rcpp::NumericVector B, int k, size_t npred, Rcpp::IntegerVector ia, Rcpp::IntegerVector ib, Rcpp::NumericVector out, int nthreads);
RcppExport SEXP _binmf_predict_multiple(SEXP ASEXP, SEXP BSEXP, SEXP kSEXP, SEXP npredSEXP, SEXP iaSEXP, SEXP ibSEXP, SEXP outSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type npred(npredSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ia(iaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ib(ibSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    predict_multiple(A, B, k, npred, ia, ib, out, nthreads);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_binmf_r_wrapper_binmf", (DL_FUNC) &_binmf_r_wrapper_binmf, 13},
    {"_binmf_predict_multiple", (DL_FUNC) &_binmf_predict_multiple, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_binmf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
